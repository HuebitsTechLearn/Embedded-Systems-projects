/ ============================================================================================
// ESP32-Based Weather Station with Web Dashboard
// ============================================================================================
// This code creates a real-time weather station using an ESP32.
// It collects temperature and humidity from a DHT22, and pressure/temperature from a BMP180.
// The ESP32 then hosts a simple web server with a dashboard that displays the data live,
// updating via JavaScript.
//
// Author: Gemini
// Date: June 14, 2025
//
// Libraries Required:
//   1. WiFi.h (built-in for ESP32)
//   2. AsyncTCP.h (for AsyncWebServer) - Download via Library Manager
//   3. ESPAsyncWebServer.h (for AsyncWebServer) - Download via Library Manager
//   4. Adafruit Unified Sensor (by Adafruit)
//   5. DHT sensor library (by Adafruit)
//   6. Adafruit BMP085 Library (for BMP180, by Adafruit)
//   7. Wire.h (built-in for I2C communication)
//
// Wiring Guide (ESP32 DevKitC):
// ----------------------------
// DHT22:
//   - VCC to 3.3V or 5V (check your sensor module, most are 3.3-5.5V compatible)
//   - GND to GND
//   - Data to ESP32 Digital Pin 16 (or any other GPIO)
//   - Add a 10K Ohm pull-up resistor from Data to VCC
//
// BMP180 (I2C):
//   - VCC to 3.3V
//   - GND to GND
//   - SDA to ESP32 Digital Pin 21 (SDA)
//   - SCL to ESP32 Digital Pin 22 (SCL)
//
// Important:
// - Replace 'YOUR_SSID' and 'YOUR_PASSWORD' with your actual Wi-Fi credentials.
// - Adjust DHT_PIN if you use a different GPIO.
// - The web dashboard HTML/CSS/JS is embedded directly in the code for simplicity.
//   For larger dashboards, consider storing them in SPIFFS (ESP32 flash file system).
// ============================================================================================

#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>           // DHT sensor library
#include <Adafruit_BMP085.h> // BMP180 sensor library
#include <Wire.h>          // I2C communication

// ======================= Wi-Fi Configuration =======================
const char* ssid = "YOUR_SSID";         // Your Wi-Fi SSID
const char* password = "YOUR_PASSWORD"; // Your Wi-Fi Password

AsyncWebServer server(80); // Create AsyncWebServer object on port 80

// ======================= Sensor Definitions =======================
#define DHT_PIN 16     // DHT22 Data pin connected to ESP32 GPIO 16
#define DHT_TYPE DHT22 // DHT type (DHT11 or DHT22)

DHT dht(DHT_PIN, DHT_TYPE);
Adafruit_BMP085 bmp; // BMP180 sensor object

// Global variables to store sensor readings
float temperature_c = 0;
float humidity = 0;
float pressure_hpa = 0;
float altitude_m = 0;

// ======================= HTML / CSS / JavaScript for Web Dashboard =======================
// This is the entire web page content served by the ESP32
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>ESP32 Weather Station</title>
<style>
  body {
    font-family: 'Inter', sans-serif;
    background-color: #1a1a2e;
    color: #e0e0e0;
    margin: 0;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
    box-sizing: border-box;
  }
  .container {
    background-color: #2a2a4a;
    border-radius: 15px;
    padding: 25px 35px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
    width: 90%;
    max-width: 500px;
    text-align: center;
    margin-bottom: 20px;
  }
  h1 {
    color: #e94560;
    font-size: 2em;
    margin-bottom: 20px;
    text-shadow: 2px 2px 5px rgba(0,0,0,0.3);
  }
  .data-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-top: 20px;
  }
  .data-item {
    background-color: #3f3f6c;
    border-radius: 12px;
    padding: 15px;
    box-shadow: inset 0 2px 5px rgba(0, 0, 0, 0.2);
    transition: transform 0.2s ease-in-out;
  }
  .data-item:hover {
    transform: translateY(-5px);
  }
  .data-label {
    font-size: 0.9em;
    color: #b0b0b0;
    margin-bottom: 5px;
  }
  .data-value {
    font-size: 1.8em;
    font-weight: bold;
    color: #0f3460;
  }
  .unit {
    font-size: 0.8em;
    color: #e94560;
    margin-left: 5px;
  }
  #status {
    font-size: 0.8em;
    color: #888;
    margin-top: 15px;
  }
  .chart-container {
      margin-top: 30px;
      width: 90%;
      max-width: 600px;
      background-color: #3f3f6c;
      border-radius: 15px;
      padding: 20px;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
  }
  @media (max-width: 480px) {
    .data-grid {
      grid-template-columns: 1fr;
    }
    .container {
      padding: 20px;
    }
    h1 {
      font-size: 1.8em;
    }
    .data-value {
      font-size: 1.5em;
    }
  }
</style>
</head>
<body>
<div class="container">
  <h1>Weather Station Dashboard</h1>
  <div class="data-grid">
    <div class="data-item">
      <div class="data-label">Temperature</div>
      <div class="data-value"><span id="temperature">--</span><span class="unit">째C</span></div>
    </div>
    <div class="data-item">
      <div class="data-label">Humidity</div>
      <div class="data-value"><span id="humidity">--</span><span class="unit">%</span></div>
    </div>
    <div class="data-item">
      <div class="data-label">Pressure</div>
      <div class="data-value"><span id="pressure">--</span><span class="unit">hPa</span></div>
    </div>
    <div class="data-item">
      <div class="data-label">Altitude</div>
      <div class="data-value"><span id="altitude">--</span><span class="unit">m</span></div>
    </div>
  </div>
  <div id="status">Last updated: Never</div>
</div>

<div class="chart-container">
    <canvas id="temperatureChart"></canvas>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  const temperatureElement = document.getElementById('temperature');
  const humidityElement = document.getElementById('humidity');
  const pressureElement = document.getElementById('pressure');
  const altitudeElement = document.getElementById('altitude');
  const statusElement = document.getElementById('status');

  let tempChart;
  let tempLabels = [];
  let tempData = [];
  const MAX_DATA_POINTS = 10; // Keep last 10 data points for the chart

  function initChart() {
      const ctx = document.getElementById('temperatureChart').getContext('2d');
      tempChart = new Chart(ctx, {
          type: 'line',
          data: {
              labels: tempLabels,
              datasets: [{
                  label: 'Temperature (째C)',
                  data: tempData,
                  borderColor: 'rgb(233, 69, 96)',
                  backgroundColor: 'rgba(233, 69, 96, 0.2)',
                  fill: true,
                  tension: 0.3
              }]
          },
          options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                  x: {
                      title: {
                          display: true,
                          text: 'Time',
                          color: '#e0e0e0'
                      },
                      ticks: {
                          color: '#b0b0b0'
                      },
                      grid: {
                          color: 'rgba(255, 255, 255, 0.1)'
                      }
                  },
                  y: {
                      title: {
                          display: true,
                          text: 'Temperature (째C)',
                          color: '#e0e0e0'
                      },
                      ticks: {
                          color: '#b0b0b0'
                      },
                      grid: {
                          color: 'rgba(255, 255, 255, 0.1)'
                      }
                  }
              },
              plugins: {
                  legend: {
                      display: true,
                      labels: {
                          color: '#e0e0e0'
                      }
                  },
                  tooltip: {
                      callbacks: {
                          label: function(context) {
                              return context.dataset.label + ': ' + context.raw + '째C';
                          }
                      }
                  }
              }
          }
      });
  }

  function fetchData() {
    fetch('/data')
      .then(response => response.json())
      .then(data => {
        temperatureElement.textContent = data.temperature_c.toFixed(1);
        humidityElement.textContent = data.humidity.toFixed(1);
        pressureElement.textContent = data.pressure_hpa.toFixed(1);
        altitudeElement.textContent = data.altitude_m.toFixed(1);
        statusElement.textContent = `Last updated: ${new Date().toLocaleTimeString()}`;

        // Update chart data
        const now = new Date();
        tempLabels.push(now.toLocaleTimeString());
        tempData.push(data.temperature_c);

        if (tempLabels.length > MAX_DATA_POINTS) {
            tempLabels.shift();
            tempData.shift();
        }
        tempChart.update();

      })
      .catch(error => {
        console.error('Error fetching data:', error);
        statusElement.textContent = `Error: ${new Date().toLocaleTimeString()}`;
        temperatureElement.textContent = '--';
        humidityElement.textContent = '--';
        pressureElement.textContent = '--';
        altitudeElement.textContent = '--';
      });
  }

  window.onload = function() {
    initChart();
    fetchData(); // Fetch immediately on load
    setInterval(fetchData, 5000); // Fetch data every 5 seconds
  };
</script>
</body>
</html>
)rawliteral";

// ======================= Setup Function =======================
void setup() {
  Serial.begin(115200); // Start serial communication for debugging

  // Initialize DHT sensor
  dht.begin();
  Serial.println("DHT sensor initialized.");

  // Initialize BMP180 sensor
  if (!bmp.begin()) {
    Serial.println("BMP180 sensor not found. Check wiring.");
    while (1) {} // Halt if sensor fails
  }
  Serial.println("BMP180 sensor initialized.");

  // Connect to Wi-Fi
  Serial.print("Connecting to WiFi: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  unsigned long startTime = millis();
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
    if (millis() - startTime > 15000) { // Timeout after 15 seconds
      Serial.println("\nFailed to connect to WiFi. Please check credentials and try again.");
      ESP.restart(); // Restart ESP32 to retry connection
    }
  }
  Serial.println("\nWiFi connected.");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Set up web server routes
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html);
  });

  server.on("/data", HTTP_GET, [](AsyncWebServerRequest *request){
    // Read sensor data
    temperature_c = dht.readTemperature();
    humidity = dht.readHumidity();
    pressure_hpa = bmp.readPressure() / 100.0F; // Convert Pa to hPa
    altitude_m = bmp.readAltitude();

    // Check if any readings failed and handle NaN or invalid values
    if (isnan(temperature_c) || isnan(humidity)) {
      Serial.println("Failed to read from DHT sensor!");
      temperature_c = 0.0; // Assign a default/error value
      humidity = 0.0;
    }
    if (pressure_hpa == 0.0) { // BMP returns 0 on error usually
      Serial.println("Failed to read from BMP180 sensor!");
      pressure_hpa = 0.0;
      altitude_m = 0.0;
    }


    // Create JSON response string
    String jsonResponse = "{\"temperature_c\":";
    jsonResponse += String(temperature_c, 2); // 2 decimal places
    jsonResponse += ",\"humidity\":";
    jsonResponse += String(humidity, 2);
    jsonResponse += ",\"pressure_hpa\":";
    jsonResponse += String(pressure_hpa, 2);
    jsonResponse += ",\"altitude_m\":";
    jsonResponse += String(altitude_m, 2);
    jsonResponse += "}";

    request->send(200, "application/json", jsonResponse);

    // Print to Serial for debugging
    Serial.print("Temp: "); Serial.print(temperature_c); Serial.print("째C ");
    Serial.print("Hum: "); Serial.print(humidity); Serial.print("% ");
    Serial.print("Pres: "); Serial.print(pressure_hpa); Serial.print("hPa ");
    Serial.print("Alt: "); Serial.print(altitude_m); Serial.println("m");
  });

  // Start server
  server.begin();
  Serial.println("HTTP server started.");
}

// ======================= Loop Function =======================
void loop() {
  // The web server runs asynchronously in the background.
  // Sensor readings are performed when the /data endpoint is requested by the browser.
  // You can add other non-blocking tasks here if needed.
  delay(10); // Small delay to prevent watchdog timer issues
}
